//https://www.youtube.com/watch?v=1OU5ngq-WyM&list=PLQlWzK5tU-gDyxC1JTpyC2avvJlt3hrIh&index=1
//Juriy Bura
cloud service
  amazon, google, azure ==> best service for big project, high price, multiserver

Iaas 
  digitalOcean, Linode, Amazon Lightsail ==> best for small-medium project,multi server, low price

Paas
  heroku, nodejitsu, ==> best for study , small node server project.

============================================
Node application
from ==> https://github.com/Juriy/easyio   //web socket nodejs
============================================
Digital Ocean
- sign up (credit card)
- create a droplet        
  //DigitalOcean (get $10 credits) https://m.do.co/c/e79071ae6b49  ||  Sample app: 
  (10$/month, ssh key at $~/.ssh/id_rsa.pub ,os, one-click-app, server-location, host-name 4 droplet )
  
============================================
create DNS
godady.com, HostGator, Namecheap, eNom, Gandi, 1&1  etc...
- nanogram.io

DNS record at digital ocean
Hostname        value
nanogram.io     direct to 188.166.228.208

============================================
linux on server
- log in to server
  $ssh root@188.166.228.208
- update/upgrade linux
  $yum -y update
  or
  $sudo apt-get update
  $sudo apt-get upgrade
  
- install linux-package
  $yum -y groupinstall "Development Tools"
  $yum -y install vim net-tools
  
- install for ssl certificate
  $yum -y install epel-release
  $yum -y install certbot        //to create ssl certificate request
  
- install node js 
  ..... see nodejs website
  $node -v
  $npm -v
- install yarn (if need)
  $sudo yum -y install yarn
  #yarn --version

  add a normal user
- #adduser nikhom
- #sudo su -nikhom
- $whoami
- $mkdir .ssh
- chmod 700 .ssh
- touch .ssh/authorized_keys
- chmod 600 .ssh/authorized_keys
  //copy-past public_key from local machine ~/.ssh/id_rsa.pub to "server" ./ssh/authorized_keys
- log in to server with nikhom 
  $ssh nikhom@188.166.228.208

  add a root user (if need)
  #adduser rootadmin1
  #usermod -aG wheel rootadmin1
  
=============================================
linux command
- $shutdown -r now       //to shut down & restart linux
- $ping nanogram.io or $ping 188.166.228.208
- $curl -v nanogram.io:8181 //to access to application in this interface & port , -v to show detail of website
- $netstat -tln          //tcp listenning numberOfip-address
- file permision(DAC)        RWX RWX RWX (user, group, everyone)
- $ls -l                 //to show file permission
- $ ps -auxZ | grp nginx   //to show process running by nginx 
- $grep processor /proc/cpuinfo | wc -l   //to check cpu core of machine


=============================================
SElinx (Security Advance Linux)

- to block server application to connect to file or another application in the same machine
- $getenforce      //to check set-up-value of SElinux
                   //enforcing === enable,enforcing
                   //permissiv === enable (loggin), not enforcing (block) 
                   //Disable
- $ls -lZ /usr/share/nginx/html         //to show SElinux
                                        //system_u:object_r:httpd_sys_content_t:s0 index.html

- allow nginx server to connect to public/static file or other application 
  
  #setsebool -P httpd_can_network_connect on                  //allow http server to connect other backends
  #setsebool -P httpd_enable_homedirs on                      //allow http server to access user folder
  #chcon -Rt httpd_sys_content_t /home/nikhom/easyio/public   //allow http server to read file from user folder
=============================================
npm/yarn dependency on server
- #npm install -g pm2 http-server

=============================================
pm2 command
- pm2 startup systemd -u nikhom --hp /home/nikhom  //tell linux to automatically run pm2 as "pm2 save" at restart
- pm2 start --name easyio main.js  //create for first time
- pm2 ls                           //check pm2 status
- pm2 save                         //save current runing in pm2 , it will automatically run when restart
- pm2 stop easyio                  //stop easyio
- pm2 stop all                     //staop all app runnig by pm2
- pm2 status                       //check status of pm2 running  
- pm2 delete easyio                //delete application in pm2
- pm2 delete all                   //delete all application in pm2

run multiple app from same nodejs (use for load balance)
- pm2 start --name easy-1 main.js -- --name easy-1 --port 8080
- pm2 start --name easy-2 main.js -- --name easy-2 --port 8081


=============================================
nodejs command
const hostname = process.argv[2] || null       //null = default interface or 0.0.0.0
server.listen(port,hostname,(err)=>{})

=============================================
script for transfer project to from local to server 
at local 
- $touch deploy.sh

#!bin/bash
tar czf easyio.tar.gz main.js package.json yarn.lock public LICENSE
scp easyiotar.gz nikhom@188.166.228.208:~
rm easyio.tar.gz

ssh nikhom@188.166.228.208 <<'ENDSSH'
pm2 stop all
rm -rf easyio
mkdir easyio
tar xf easyio.tar.gz -C easyio 
rm easyio.tar.gz
cd easyio
npm install
pm2 start all
ENDSSH

at local 
- $./deploy.sh
==============================================
Network Interface
- each machine have many interface (ip-address) to connect many network


- 0.0.0.0   ==> public interface every network can access application which use this interface
                this is default interface for node.js 
                server.listen(port,()=>{})  === server.listen(port,0.0.0.0,()=>{}) 

- 127.0.0.01 ==> localhost
- 192.168.1.104 ==> normal interface in home network
- digital also provide private interface for internal server-server of digital ocean
  for quick performance 

==============================================
NGINX 
at server
- install
  #yum install -y epel-release
  #yum -y install nginx 
  
  #sudo apt-get install nginx
  #sudo apt-get remove --purge nginx*   //to clearly remove nginx
  
- run nginx 
  #systemctl start nginx
  #systemctl restart nginx
  #systemctl reload nginx
  or 
  #service start nginx
  
- Auto run nginx when restart 
  #systemctl enable nginx 
  or
  $ sudo update-rc.d -n  nginx defaults

- Check nginx
  #systemctl status nginx

- Test nginx config  before restart nginx (no down time) 
  #nginx -t
  
  always backup nginx folder 
- $cp -r /etc/nginx
- $tar czf nginx.tar.gz nginx/
- $rm -rf nginx


- change group owner of static file to allow nginx to access
  $namei -om /home/nikhom/easyio/public/         //to check ownership and file permission
  $chown  nikhom:nginx /home/nikhom/             //change owner for this folder to nginx
  $chmod  g+x /home/nikho/                       //chage file permission for group to exec    
  
===============================================
/etc/nginx/nginx.conf
Nginx can server many server {} by config them in  .conf

http {
  include /etc/nginx/conf.d/*.conf;    
  //this line show all config for many server can be added this folder with .conf
  
}

================================================
/etc/nginx/conf.d/nanogram.io.conf

- to setup config file for our nanogram.io server
- nginx will accept connection from client
  - reverse proxy to all node app route / to websocket  / to https 
  - reverse proxy to static file
  - load balance node app
 
upstream easyio{                                     //make load balance 
  ip_hash;                                           //declare all header must be send from same app
  server localhost:8080;
  server localhost:8081; 
}

server { 
  listen 80;                                         //nginx server listen at port 80 of ipv4
  listen [::]:80;                               
  server_name nanogram.io;                           
  
  root /home/nikhom/easyio/public                    //http://nanogram.io  
                                                     //forward to static file such as /buil/ of react app
                                                     //need to change owner to nginx, and change +x for group  
  
  proxy_set_header Host $http_host;                  //client want to connect to ....
  proxy_set_header X-Real-IP $remote_addr;           //client ip address 
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   //client ip address
  
  location /socker.io/{                              //http://nanogram.io/socket.io/
   proxy_http_version 1.1;                           //set hop_by_hop header
   proxy_set_header Upgrade $http_upgrade;
   proxy_set_header Connection "upgrade";
   proxy_pass "http://easyio/socket.io/"     //forward to node.js app
   ####"http://localhost:8080/socket.io/";
  }
  
  location /api/{                                    //http://nanogram.io/api
    proxy_pass "http://easyio/api/";    //nginx forward to nodejs app server.listen(8080,"127.0.0.1",()=>{})
    ####"http://localhost:8080/api/";
  }
  
  error_page 404/404.html;
    location =/40x.html{
  }
  
  error_page 500 502 503 504 /50x.html;
    location =/50x.html{
  }

}

===============================================
web socket hand-shake

web socket is hop-by-hop Headers   //Header send many time before establich socket connection
                                     
===============================================
ssl certificate for https
//#yum -y install certbot 

- make a request for ssl certificate with certbot
  #cerbot certonly --standalone -d nanogram.io    //create request for this server only for nanogram.io 
  
- See important note  
  - location of request at  /etc/letsencrypt/live/nanogram.io/fullchain.pem.
  - expiredate date
  - account credential at /etc/letsencrypt         //need to back up 

- back up ssl account credential 
  #cp -r/etc/letsencrypt/ /home/nikhom/
  #cd /home/nikhom/
  #tar czf letsencrypt.tar.gz letsencrypt/       

====================================
create ssl conf for nginx from 
- https://ssl-config.mozilla.org/#server=nginx&server-version=1.17.0&config=intermediate
- from this website select
   -nginx
   -intermediate
   -server version   (node versiont from $node -v) 
   
- we will get following and change to nginx configuration file
- after we can use    https://nanogram.io


########################
########################

# generated 2019-10-15, https://ssl-config.mozilla.org/#server=nginx&server-version=1.17.0&config=intermediate

upstream easyio{
  ip_hash;                              //declare all header must be send from same app
  server localhost:8080;
  server localhost:8081; 
}

server {
    listen 80;
    listen [::]:80;
    server_name nanogram.io; 

    # redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
    return 301 https://$host$request_uri;                 //block   http://nanogram.io
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    server_name nanogram.io; 
    root /home/nikhom/easyio/public                      //https://nanogram.io     

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate /etc/letsencrypt/live/nanogram.io/fullchain.pem;                      //change to our proj
    ssl_certificate_key /etc/letsencrypt/live/nanogram.io/privkey.pem;                    //change to our proj
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam.pem
    # ssl_dhparam /path/to/dhparam.pem;

    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers on;                                         //on to increase security

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    # ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

    # replace with the IP address of your resolver
    resolver 8.8.8.8;                                               //change to this address 
    
    
    proxy_set_header Host $http_host;                               //from this line , copy from above 
    proxy_set_header X-Real-IP $remote_addr;           
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
  
    location /socker.io/{                              
    proxy_http_version 1.1;                          
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_pass "http://easyio/socket.io/"   
    }
  
    location /api/{                                    
      proxy_pass "http://easyio/api/";    
    }
  
    error_page 404/404.html;
      location =/40x.html{
    }
  
    error_page 500 502 503 504 /50x.html;
      location =/50x.html{
    }

    
}  
 
  
  
  

  



