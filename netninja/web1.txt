https://www.youtube.com/watch?v=vQjiN8Qgs3c

ch1: 
====
Web Socket
- communication between client (browser/chat application) - server
- two-way communication
- real time data flow (socket always open between client-server)

Mr.A  <---socket.io--- > Server(nodeJS) <---Socket.io---> Mr.B


Example of socket.io
- multiplayer brower games
- collaboration code editing
- live text for sport/new website
- online drawing canvas
- real-time app with multiple user


ch2:
====
$npm init 
$npm install express --save
$npm install nodemon --save-dev
$npm install socket.io --save       //install socket on server side
$touch index.js   >> server app 
$mkdir public
$touch public/index.html   >> static file 

=========================
=========================
=========================
=========================
=========================
=========================
=========================
=========================
=========================
=========================

ch5: broadcasting message


=========
index.js      // backend application
==========
const express=require('express');
const socket=require('socket.io)
//index.js
const app=express();
const server=app.listen(4000,()=>{
    console.log('Listen on port 4000');
});

//Static file
app.use(express.static('public'));

//socket setup
const io=socket(server);         

io.on('connection',(socket)=>{                          //server waiting for event connection from browser
    console.log('made socket connection',socket.id);    // made socket connection N-OGLEGEFGS-DFAGEVD

    socket.on('chat',(data)=>{
        io.sockets.emit('chat',data);                   //sockets => send to all client
               
    });

    socket.on('typing',(data)=>{
        socket.broadcast.emit('typing',data)            //socket => to broadcast.emit to everyone except the origial one
    })
})



===================
public/index.html                                  //https://cdnjs.com/libraries/socket.io
===================
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>
    <title>Document</title>
</head>
<body>
    <div id="mario-chat"> 
        <div id="chat-window">
            <div id="output">
            <div id="feedback">             
            </div>
        </div>

        <input id="handle" type="text" placeholder="Handle" />
        <input id="message" type="text" placholder="Message" />
        <button id="send">Send</button>
    </div>
    <script src="/chat.js"></script>
</body>
</html>

====================
public/chat.js
====================
//Front end connection
const socket = io.connect("http://localhost:4000");   //now socket is open


//Query DOM 

const message=document.getElementById('message');
const handle=document.getElementById('handle');
const btn=document.getElementById('send');
const output=document.getElementById('outupt');
const feedback=document.getElementById('feedback');

//Emit event
btn.addEventListener('click',()=>{
    socket.emit('chat',{                                //emit 'chat'  is a code to send to server
        message:message.value,
        handle:handle.value
    })
})

message.addEventListener('keypress',()=>{
    socket.emit('typing',handle.value);
})

//Listen for events 
socket.on('chat',(data)=>{
    feedback.innerHTM="";
    output.innerHTML+='<p><strong>'+data.handle+':</strong>'+data.message+'</p>'  //+= is to just adding with existing one
});

socket.on('typing',(data)=>{
    feedback.innerHTML ='<p><em>'+data+'is typing a message...'</em></p>'   //
});

=======================